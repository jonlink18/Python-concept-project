print ("Verificador de Numero primos!")

num =int(input("Coloca un numero para saber si un numero primo:"))

def n_primos(n):
    if n < 2:
        return False
    for i in range(2,int(n**0.5)+1):
        if n% i ==0:
            return False
        
    return True

if n_primos(num):
    print(f"{num} es primo")
else:
    print (f"{num} no es primo")
    


"""
otro ejemplo a detalle!
 Â¡Perfecto! Vamos a agregar un `print()` dentro del bucle para ver **quÃ© valores prueba la funciÃ³n y cÃ³mo decide si un nÃºmero es primo**.

---

### âœ… VersiÃ³n explicada de `es_primo(n)` con `print()` paso a paso:

```python
def es_primo(n):
    if n < 2:
        print(f"{n} no es primo (menor que 2)")
        return False
    
    print(f"Probando si {n} es primo...")
    for i in range(2, int(n**0.5) + 1):
        print(f"  Â¿{n} divisible por {i}? â†’ {n % i == 0}")
        if n % i == 0:
            print(f"  SÃ­, {n} es divisible por {i}, entonces NO es primo.\n")
            return False

    print(f"  No se encontrÃ³ ningÃºn divisor. {n} ES primo.\n")
    return True
```

---

### ðŸ§ª Prueba con un nÃºmero primo (`n = 29`):

```python
es_primo(29)
```

**Salida:**

```
Probando si 29 es primo...
  Â¿29 divisible por 2? â†’ False
  Â¿29 divisible por 3? â†’ False
  Â¿29 divisible por 4? â†’ False
  Â¿29 divisible por 5? â†’ False
  No se encontrÃ³ ningÃºn divisor. 29 ES primo.
```

---

### ðŸ§ª Prueba con un nÃºmero NO primo (`n = 15`):

```python
es_primo(15)
```

**Salida:**

```
Probando si 15 es primo...
  Â¿15 divisible por 2? â†’ False
  Â¿15 divisible por 3? â†’ True
  SÃ­, 15 es divisible por 3, entonces NO es primo.
```

---

Esto te permite **ver claramente cÃ³mo trabaja el `for` paso a paso**, y por quÃ© se detiene apenas encuentra un divisor.

Â¿Quieres que agreguemos una lista de todos los divisores encontrados tambiÃ©n?
"""